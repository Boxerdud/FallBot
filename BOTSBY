#include <kipr/wombat.h>

//ports
int lm = 3;  //left motor
int rm = 0;  // right motor

int left_ir = 2; //left ir CHECK SENSORS
int right_ir = 1; //right ir CHECK SENSORS
int r_range = 3; //right rangefinder

int arm_base = 1; // base of arm, directly on chassis
int arm_pivot = 2; //second servo, pivots arm
int claw = 3; //controls claw opening and closing
int sweep = 0;

int sweep_out = 250;
int sweep_in = 1100;

//movement
int speed = 200; //motor speed
int fiddle_speed = 50; //used to adjust for stopline
int turn_speed = 100; //used for turn function

//sensor values
int tape = 3500; //black tape on ir sensors     ADJUST FOR LIGHT; WAS 3300
//functions
void drive(int direction, int speed, int distance); // 2000 for distance, 22.4 cm  INPUT IN CM
void turn(int direction, int turn_speed, int distance);

void stopTuah(int speed, int fiddle_speed);
void stopTuahLeft(int speed, int fiddle_speed);
void stopTuahRight(int speed, int fiddle_speed);

void sweepWater();

void lineCalibration();
void rangeRead();
//void start();
int main()
{
    ao();
    enable_servos(0);
    set_servo_position(sweep, sweep_in);
    msleep(1000);  //TEMP, JUST FOR SETUP
    
    
    
    stopTuah(500, 200); //lines up on black line
    drive(1,900, 5);
    stopTuah(800,200); 
    drive(-1, 300, .5); 
    turn(-1, 400, 1100);   //, moves to left of lane, moves up, and turns right 90

    
    drive(1, 800, 20.8); //drives to first pom, sweeps
    sweepWater();
    
    drive(1, 800, 25.3);    //drives to second pom, sweeps
    sweepWater();                 
    
 	stopTuah(800, 50); //heads to middle line
    ao();
    msleep(2000);//grab yellow cube/poms here
    printf("Yellow 1/n");
    
    drive(-1, 800, 30); //grab red cubes/poms here  WAS 27
    ao();
    msleep(4000);
    printf("small cube 1/n");
    
    stopTuah(800, 50); //moves up to center line
    printf("halfway lol /n");
    msleep(10);
    
    drive(1, 900, 11);
    sweepWater();

  	drive(1, 900,1);
    ao();
    msleep(2000); //grab yellow cube 2 here
    printf("Yellow 2/n");
    
    drive(1, 900, 20);
    sweepWater();
    
    ao();
    return 0;
}


void drive(int direction, int speed, int distance)
{
    cmpc(lm);
   cmpc(rm);
    distance = distance * 101.1206896;
    if (direction > 0) //forward if 1
    { 
        while(( ( abs(gmpc(rm)) + abs(gmpc(lm)) ) / 2 ) < distance) // takes the clear motors clear value and moves until its reached the distance
        {
            mav(lm,speed);
            mav(rm,speed);
        }
    }
    if (direction < 0) //back if 1
    { 
        while(( ( abs(gmpc(rm)) + abs(gmpc(lm)) ) / 2 ) < distance) // takes the clear motors clear value and moves until its reached the distance
        {
            mav(lm,-speed);
            mav(rm,-speed);
        }
    }
    cmpc(lm);
    cmpc(rm);
}
void turn (int direction, int turn_speed, int distance)   // positive = CCW, negative = CW +=left - = right
{
cmpc(lm);
cmpc(rm); 
if (direction < 0) //turn left
	{
	while(( (abs(gmpc(rm)) + abs(gmpc(lm)) ) / 2) < distance)
  		{
        mav(lm,abs(turn_speed));
        mav(rm,-abs(turn_speed));
		} 

	}
if (direction > 0) // turn right
	{
	while(( (abs(gmpc(rm)) + abs(gmpc(lm)) ) / 2) < distance)
  		{
        mav(lm,-abs(turn_speed));
        mav(rm,abs(turn_speed));
		} 

	}
cmpc(lm);
cmpc(rm);

}

void lineCalibration(){
    stopTuah (100, 20); //back up to black line
    cmpc(lm);
    cmpc(rm);
    drive(1, 50, 1);
    msleep(2000);
    stopTuah(100, 20); //move up to black line, measure
    printf("left: %d\n", gmpc(lm) );
    printf("right: %d\n", gmpc(rm) );
}

void rangeRead(){
	int i = 0;
    int temp = 0;
    printf("vars\n");
	while (i < 2000){
    temp = temp + analog(0);
    msleep(1);
    i++;
    }
    printf("looped\n");
    int printer = temp/2000;
    printf("reading : %d\n", printer);
}


void stopTuah (int speed, int fiddle_speed){
	while( (analog(left_ir) < tape)  &&  (analog(right_ir) < tape) ){
		mav(lm, speed);
        mav(rm, speed);		
		msleep(3);
	}
    if ( (analog(left_ir) > tape)  &&  (analog(right_ir) < tape) ){
    	stopTuahLeft(speed, fiddle_speed);
    }
    if ( (analog(left_ir) < tape)  &&  (analog(right_ir) > tape) ){
    	stopTuahRight(speed, fiddle_speed);
    }
}

void stopTuahLeft(int speed, int fiddle_speed){ //lines up when left IR hits
    	while(analog(right_ir) < tape ){
            while(analog (left_ir) > tape ) {
                freeze(rm);
                mav(lm, -fiddle_speed);
                msleep(1);
            }
            while(analog(left_ir) < tape ) {
            mav(lm, fiddle_speed);
            mav(rm, fiddle_speed);	
            }
        }
}

void stopTuahRight(int speed, int fiddle_speed){ //lines up when left IR hits
    	while(analog(left_ir) < tape ){
            while(analog (right_ir) > tape ) {
                freeze(lm);
                mav(rm, -fiddle_speed);
                msleep(1);
            }
            while(analog(right_ir) < tape ) {
            mav(lm, fiddle_speed);
            mav(rm, fiddle_speed);	
            }
        }
}

void sweepWater(){
	set_servo_position(sweep,sweep_out);
	msleep(200);
    set_servo_position(sweep, sweep_in);
}
